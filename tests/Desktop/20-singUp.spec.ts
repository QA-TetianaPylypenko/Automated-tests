import { randomEmail } from '../POM/function_randomEmail'
import user from '../utils/userSingUp.json'

import { expect, test } from '@playwright/test'
import dotenv from 'dotenv'
import { resolve } from 'path'

const name = '–¢–µ—Å—Ç'
//const nameInvalid = '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ–æ–ø–∞—Ä–∞–∞'
const surname = '–¢–µ—Å—Ç'
//const surnameInalid = '@@@@123$#'
const email: string = randomEmail()
const emailInvalid = 'test.gmail.com'
const emailExist = 'test@gmail.com'
const password = 'Test1234'
const passwordInvalidShort = 'Te12'

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É —Ñ–æ—Ä–º—ñ —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Googl
test('SingUp check elements', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).isEnabled()
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await expect(page.getByPlaceholder("–Ü–º'—è")).toBeEnabled()
	await expect(page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe')).toBeEnabled()
	await expect(page.getByPlaceholder('mail@google.com')).toBeEnabled()
	await expect(page.getByPlaceholder('************')).toBeEnabled()
	await expect(page.getByRole('main').getByRole('button').first()).toBeEnabled()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeEnabled()
	await expect(page.getByRole('button', { name: '—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è' })).toBeEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: 'Google' }).isEnabled()
	await page.getByRole('button', { name: '–£–≤—ñ–π—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: 'Google' }).click()
	await expect(page).toHaveURL(/google/)
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫—É '–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'
test('Checking –∑ —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è button', async ({ page }) => {
    await page.goto('/');
    await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click();
    await expect(page).toHaveURL(/register/);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ó —É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"
    await page.getByRole('button', { name: '—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è' }).isEnabled();
    await page.getByRole('button', { name: '—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è' }).click();
});


// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
test.fixme('Sing Up with valid data', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").fill(user.UfirstName)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(user.UlastName)
	await page.getByPlaceholder('mail@google.com').fill(user.Uemail)
	await page.getByPlaceholder('************').fill(user.Upassword)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–ª–∞–∑–∏–∫—É —É –ø–æ–ª—ñ –ø–∞—Ä–æ–ª—å
	await page.getByRole('main').getByRole('button').first().isEnabled
	await page.getByRole('main').getByRole('button').first().click()
	await page.getByRole('main').getByRole('button').first().click()

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()
	await page.getByRole('heading', { name: '–õ–∏—Å—Ç –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' }).isVisible()
	// await page.getByRole('button', { name: '–ù–∞ –≥–æ–ª–æ–≤–Ω—É' }).isEnabled()

	// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è mailpit

	dotenv.config({ path: resolve(__dirname, '.env') })

	const TEST_SMTP_UI: string | undefined = process.env.TEST_SMTP_UI

	if (TEST_SMTP_UI) {
		// –ó–Ω–∞—á–µ–Ω–Ω—è TEST_SMTP_UI –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ .env
		// –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –≤–∏–∫–ª–∏–∫—É page.goto()
		await page.goto(TEST_SMTP_UI)
	} else {
		console.error('–ó–º—ñ–Ω–Ω–∞ TEST_SMTP_UI –Ω–µ –±—É–ª–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª—ñ.')
	}
	// await expect(page.locator('#app')).toContainText('Mailpit')

	// await page.getByRole('button', { name: 'ÔÑñ Inbox' }).click()
	await page
		.locator('div')
		.filter({ hasText: /^Mailpit$/ })
		.first()
		.click()

	await page.locator('#message-page >> a', { hasText: 'seconds ago' }).first().click()
	await expect(
		page
			.frameLocator('#preview-html')
			.getByText(`–ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ üîó –ü–û–°–ò–õ–ê–ù–ù–Ø –≤–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ —Ä–µ—î—ñ—Å—Ç—Ä–∞—Ü—ñ—é —É Pawmerge.`)
	).toBeVisible()

	const WEB_URL: string | undefined = process.env.WEB_URL
	const path = '/new-' // –®–ª—è—Ö –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
	const fullURL = `${WEB_URL}${path}` // –ü–æ–≤–Ω–∏–π URL

	if (WEB_URL) {
		await page.goto(fullURL) // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ–≤–Ω–∏–π URL
	} else {
		console.error('WEB_URL –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ.')
	}

	// —Å–ø—Ä–æ–±–∞ –∑–ª–æ–≤–∏—Ç–∏ –º–µ—Å–µ–¥–∂ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é
	// await expect(
	// 	page.locator('div').filter({ hasText: /^–£—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ, –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç$/ })
	//   ).toBeVisible({ timeout: 7000 }); // –¢—É—Ç –º–∏ –¥–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥–∏ (2000 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥)

	// // —Å–ø—Ä–æ–±–∞ –∑–∞–π—Ç–∏ –≤ —Ñ—Ä–µ–π–º –≤ –º–µ–π–ª–ø—ñ—Ç
	// const frame = await page.frameLocator('#preview-html');

	// // –í–∑–∞—î–º–æ–¥—ñ—î–º–æ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—Ä–µ–π–º—É
	// await frame.getByRole('link', { name: 'üîó –ü–û–°–ò–õ–ê–ù–ù–Ø' }).click();

	// await page.waitForTimeout(5000)

	await page.waitForLoadState('networkidle')

	//–≤—Ö—ñ–¥ —É –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
	await page.goto('/login')
	await page.getByPlaceholder('email@google.com').fill(user.Uemail)
	await page.getByPlaceholder('**********').fill(user.Upassword)
	await page.getByRole('button', { name: '–£–≤—ñ–π—Ç–∏' }).click()

	//–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—Ö–æ–¥—É —É –ø—Ä–æ—Ñ—ñ–ª—å
	await expect(page.getByText(`${user.UfirstName} ${user.UlastName}`)).toBeVisible()
	await expect(page.getByRole('button', { name: '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏' })).toBeVisible()
})

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–µ–∑ —á–µ–∫–±–æ–∫—Å—É
test.fixme('Sing Up with valid data without checkbox', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(email)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').isEnabled()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aria-invalid = true (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ–∫–±–æ–∫—Å—É)
	const ariaCheckbox = await page
		.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')
		.getAttribute('aria-invalid')
	await expect(ariaCheckbox).toEqual('true')
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–Ü–º'—è' (–ø—É—Å—Ç–µ)
test.fixme('Sing Up with empty name', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill('')
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(email)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aria-invalid = true —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è)
	const ariaName = await page.locator('input[placeholder="–Ü–º\'—è"]').getAttribute('aria-invalid')
	await expect(ariaName).toEqual('true')
	await page.getByText("–Ü–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").isVisible()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–Ü–º'—è' (51 —Å–∏–º–≤–æ–ª)
/*test('Sing Up invalid name - 51 symbols', async ({ page }) => {
    await page.goto('/');
    await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click();
    await expect(page).toHaveURL(/register/);
    await page.getByPlaceholder('–Ü–º\'—è').click();
    await page.getByPlaceholder('–Ü–º\'—è').fill(nameInvalid);
    await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click();
    await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname);
    await page.getByPlaceholder('mail@google.com').click();
    await page.getByPlaceholder('mail@google.com').fill(email);
    await page.getByPlaceholder('************').click();
    await page.getByPlaceholder('************').fill(password);
    
    //–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
    await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check();
    await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').isChecked();
    
    await page.getByRole('button', {name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'}).isEnabled();
    await page.getByRole('button', {name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'}).click();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aira-invalid = true —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è)
    const ariaName = await page.locator('input[placeholder="–ü—Ä—ñ–∑–≤–∏—âe"]').getAttribute('aria-invalid');
    await expect(ariaName).toEqual('true'); 
    await page.getByText('–Ü–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ').isVisible();  
});
*/

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ü—Ä—ñ–∑–≤–∏—â–µ' (–ø—É—Å—Ç–µ)
test.fixme('Sing Up with empty surname', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill('')
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(email)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aira-invalid = true —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è)
	const ariaSurname = await page
		.locator('input[placeholder="–ü—Ä—ñ–∑–≤–∏—âe"]')
		.getAttribute('aria-invalid')
	await expect(ariaSurname).toEqual('true')
	await page.getByText("–ü—Ä—ñ–∑–≤–∏—âe –æ–±–æ–≤'—è–∑–∫–æ–≤–µ").isVisible()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ü—Ä—ñ–∑–≤–∏—â–µ' (—Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∏)
/*test('Sing Up with invalid surname - spesial symbols', async ({ page }) => {
    await page.goto('/');
    await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click();
    await expect(page).toHaveURL(/register/);
    await page.getByPlaceholder('–Ü–º\'—è').click();
    await page.getByPlaceholder('–Ü–º\'—è').fill(name);
    await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click();
    await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surnameInalid);
    await page.getByPlaceholder('mail@google.com').click();
    await page.getByPlaceholder('mail@google.com').fill(email);
    await page.getByPlaceholder('************').click();
    await page.getByPlaceholder('************').fill(password);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
    const requirementsList = await page.locator('ul');
    const areAllGreen = await requirementsList.locator('span.text-green-600').count();
    expect(areAllGreen).toEqual(4);

    //–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
    await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check();
    await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').isChecked();

    await page.getByRole('button', {name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'}).isEnabled();
    await page.getByRole('button', {name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'}).click();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aira-invalid = true —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è)
    const ariaSurname = await page.locator('input[placeholder="–ü—Ä—ñ–∑–≤–∏—âe"]').getAttribute('aria-invalid');
    await expect(ariaSurname).toEqual('true');
    await page.getByText('–ü—Ä—ñ–∑–≤–∏—âe –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ').isVisible();  
});*/

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ï–º–∞—ñ–ª' (–ø—É—Å—Ç–µ)
test.fixme('Sing Up with empty email', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill('')
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isDisabled()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ï–º–∞—ñ–ª' (–±–µ–∑ @)
test.fixme('Sing Up with invalid email - without @', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(emailInvalid)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	//–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').isChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ï–º–∞—ñ–ª' (–Ω–∞—è–≤–Ω–∏–π –µ–º–µ–π–ª)
test.fixme('Sing Up with exist email', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(emailExist)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(password)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(4)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()

	await page
		.locator('div')
		.filter({ hasText: /^–ê–∫–∞—É–Ω—Ç –∑ —Ü—ñ—î—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î$/ })
		.isVisible()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ü–∞—Ä–æ–ª—å' (–ø—É—Å—Ç–µ)
test.fixme('Sing Up with empty password', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(email)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill('')

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(0)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isDisabled()
})

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ª–µ '–ü–∞—Ä–æ–ª—å' (4 —Å–∏–º–≤–æ–ª–∏)
test.fixme('Sing Up with invalid password - short', async ({ page }) => {
	await page.goto('/')
	await page.getByRole('link', { name: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å' }).click()
	await expect(page).toHaveURL(/register/)
	await page.getByPlaceholder("–Ü–º'—è").click()
	await page.getByPlaceholder("–Ü–º'—è").fill(name)
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').click()
	await page.getByPlaceholder('–ü—Ä—ñ–∑–≤–∏—âe').fill(surname)
	await page.getByPlaceholder('mail@google.com').click()
	await page.getByPlaceholder('mail@google.com').fill(email)
	await page.getByPlaceholder('************').click()
	await page.getByPlaceholder('************').fill(passwordInvalidShort)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É –∑ –≤–∏–º–æ–≥–∞–º–∏ –¥–æ –ø–∞—Ä–æ–ª—é
	const requirementsList = await page.locator('ul')
	const areAllGreen = await requirementsList.locator('span.text-green-600').count()
	expect(areAllGreen).toEqual(3)

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ–∫–±–æ–∫—Å
	await page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è').check()
	await expect(page.getByLabel('–ü–æ–≥–æ–¥–∂—É—é—Å—å –∑—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')).toBeChecked()

	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).isEnabled()
	await page.getByRole('button', { name: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' }).click()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç—Ä—ñ–±—É—Ç—É aira-invalid = true —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—è)
	const ariaPassword = await page
		.locator('input[placeholder="************"]')
		.getAttribute('aria-invalid')
	await expect(ariaPassword).toEqual('true')
	await page.getByText('–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤').isVisible()
})

